// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: github.com/Microsoft/hcsshim/cmd/containerd-shim-runhcs-v1/criextension/criextension.proto

package criextension

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UpdateContainerResourcesV2Request struct {
	ContainerID          string                       `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Windows              *WindowsContainerResourcesV2 `protobuf:"bytes,2,opt,name=windows,proto3" json:"windows,omitempty"`
	Annotations          map[string]string            `protobuf:"bytes,3,rep,name=annotations,proto3" json:"annotations,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *UpdateContainerResourcesV2Request) Reset()      { *m = UpdateContainerResourcesV2Request{} }
func (*UpdateContainerResourcesV2Request) ProtoMessage() {}
func (*UpdateContainerResourcesV2Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f96a3038a3d10ce, []int{0}
}
func (m *UpdateContainerResourcesV2Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateContainerResourcesV2Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateContainerResourcesV2Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateContainerResourcesV2Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContainerResourcesV2Request.Merge(m, src)
}
func (m *UpdateContainerResourcesV2Request) XXX_Size() int {
	return m.Size()
}
func (m *UpdateContainerResourcesV2Request) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContainerResourcesV2Request.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContainerResourcesV2Request proto.InternalMessageInfo

func (m *UpdateContainerResourcesV2Request) GetContainerID() string {
	if m != nil {
		return m.ContainerID
	}
	return ""
}

func (m *UpdateContainerResourcesV2Request) GetWindows() *WindowsContainerResourcesV2 {
	if m != nil {
		return m.Windows
	}
	return nil
}

func (m *UpdateContainerResourcesV2Request) GetAnnotations() map[string]string {
	if m != nil {
		return m.Annotations
	}
	return nil
}

type UpdateContainerResourcesV2Response struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpdateContainerResourcesV2Response) Reset()      { *m = UpdateContainerResourcesV2Response{} }
func (*UpdateContainerResourcesV2Response) ProtoMessage() {}
func (*UpdateContainerResourcesV2Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f96a3038a3d10ce, []int{1}
}
func (m *UpdateContainerResourcesV2Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateContainerResourcesV2Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateContainerResourcesV2Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateContainerResourcesV2Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateContainerResourcesV2Response.Merge(m, src)
}
func (m *UpdateContainerResourcesV2Response) XXX_Size() int {
	return m.Size()
}
func (m *UpdateContainerResourcesV2Response) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateContainerResourcesV2Response.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateContainerResourcesV2Response proto.InternalMessageInfo

type WindowsContainerResourcesV2 struct {
	// CPU shares (relative weight vs. other containers). Default: 0 (not specified).
	CpuShares int64 `protobuf:"varint,1,opt,name=cpu_shares,json=cpuShares,proto3" json:"cpu_shares,omitempty"`
	// Number of CPUs available to the container. Default: 0 (not specified).
	CpuCount int64 `protobuf:"varint,2,opt,name=cpu_count,json=cpuCount,proto3" json:"cpu_count,omitempty"`
	// Specifies the portion of processor cycles that this container can use as a percentage times 100.
	CpuMaximum int64 `protobuf:"varint,3,opt,name=cpu_maximum,json=cpuMaximum,proto3" json:"cpu_maximum,omitempty"`
	// Memory limit in bytes. Default: 0 (not specified).
	MemoryLimitInBytes int64 `protobuf:"varint,4,opt,name=memory_limit_in_bytes,json=memoryLimitInBytes,proto3" json:"memory_limit_in_bytes,omitempty"`
	// TODO katiewasnothere added this
	SchedulerPriority    int64    `protobuf:"varint,5,opt,name=scheduler_priority,json=schedulerPriority,proto3" json:"scheduler_priority,omitempty"`
	CpuCap               int64    `protobuf:"varint,6,opt,name=cpu_cap,json=cpuCap,proto3" json:"cpu_cap,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WindowsContainerResourcesV2) Reset()      { *m = WindowsContainerResourcesV2{} }
func (*WindowsContainerResourcesV2) ProtoMessage() {}
func (*WindowsContainerResourcesV2) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f96a3038a3d10ce, []int{2}
}
func (m *WindowsContainerResourcesV2) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WindowsContainerResourcesV2) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WindowsContainerResourcesV2.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WindowsContainerResourcesV2) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WindowsContainerResourcesV2.Merge(m, src)
}
func (m *WindowsContainerResourcesV2) XXX_Size() int {
	return m.Size()
}
func (m *WindowsContainerResourcesV2) XXX_DiscardUnknown() {
	xxx_messageInfo_WindowsContainerResourcesV2.DiscardUnknown(m)
}

var xxx_messageInfo_WindowsContainerResourcesV2 proto.InternalMessageInfo

func (m *WindowsContainerResourcesV2) GetCpuShares() int64 {
	if m != nil {
		return m.CpuShares
	}
	return 0
}

func (m *WindowsContainerResourcesV2) GetCpuCount() int64 {
	if m != nil {
		return m.CpuCount
	}
	return 0
}

func (m *WindowsContainerResourcesV2) GetCpuMaximum() int64 {
	if m != nil {
		return m.CpuMaximum
	}
	return 0
}

func (m *WindowsContainerResourcesV2) GetMemoryLimitInBytes() int64 {
	if m != nil {
		return m.MemoryLimitInBytes
	}
	return 0
}

func (m *WindowsContainerResourcesV2) GetSchedulerPriority() int64 {
	if m != nil {
		return m.SchedulerPriority
	}
	return 0
}

func (m *WindowsContainerResourcesV2) GetCpuCap() int64 {
	if m != nil {
		return m.CpuCap
	}
	return 0
}

func init() {
	proto.RegisterType((*UpdateContainerResourcesV2Request)(nil), "containerd.runhcs.criextension.v1.UpdateContainerResourcesV2Request")
	proto.RegisterMapType((map[string]string)(nil), "containerd.runhcs.criextension.v1.UpdateContainerResourcesV2Request.AnnotationsEntry")
	proto.RegisterType((*UpdateContainerResourcesV2Response)(nil), "containerd.runhcs.criextension.v1.UpdateContainerResourcesV2Response")
	proto.RegisterType((*WindowsContainerResourcesV2)(nil), "containerd.runhcs.criextension.v1.WindowsContainerResourcesV2")
}

func init() {
	proto.RegisterFile("github.com/Microsoft/hcsshim/cmd/containerd-shim-runhcs-v1/criextension/criextension.proto", fileDescriptor_0f96a3038a3d10ce)
}

var fileDescriptor_0f96a3038a3d10ce = []byte{
	// 532 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xbf, 0x6f, 0xd3, 0x4e,
	0x14, 0xcf, 0xc5, 0xdf, 0xa6, 0xdf, 0x9c, 0x91, 0x28, 0xa7, 0x22, 0xac, 0x54, 0xb8, 0x69, 0xc4,
	0x90, 0x25, 0xb6, 0x12, 0x16, 0x04, 0x52, 0x25, 0x92, 0x66, 0x88, 0x44, 0x25, 0xe4, 0x52, 0xa8,
	0xba, 0x58, 0xce, 0xf9, 0x88, 0x4f, 0xc4, 0x77, 0xe6, 0x7e, 0x24, 0xcd, 0xc6, 0xff, 0xc3, 0x3f,
	0x52, 0x31, 0x31, 0x32, 0x21, 0xea, 0x91, 0x9d, 0x1d, 0xf9, 0xdc, 0xa4, 0x2d, 0x82, 0x16, 0x89,
	0x6e, 0xf7, 0xee, 0xf3, 0xe3, 0x7d, 0xee, 0x3d, 0xd9, 0xf0, 0x78, 0x42, 0x55, 0xa2, 0xc7, 0x1e,
	0xe6, 0xa9, 0xbf, 0x4f, 0xb1, 0xe0, 0x92, 0xbf, 0x55, 0x7e, 0x82, 0xa5, 0x4c, 0x68, 0xea, 0xe3,
	0x34, 0xf6, 0x31, 0x67, 0x2a, 0xa2, 0x8c, 0x88, 0xb8, 0x53, 0xdc, 0x75, 0x84, 0x66, 0x09, 0x96,
	0x9d, 0x59, 0xd7, 0xc7, 0x82, 0x92, 0x13, 0x45, 0x98, 0xa4, 0x9c, 0x5d, 0x29, 0xbc, 0x4c, 0x70,
	0xc5, 0xd1, 0xce, 0x85, 0xd4, 0x2b, 0x55, 0xde, 0x15, 0xd6, 0xac, 0xdb, 0xd8, 0x9c, 0xf0, 0x09,
	0x37, 0x6c, 0xbf, 0x38, 0x95, 0xc2, 0xd6, 0xf7, 0x2a, 0xdc, 0x39, 0xcc, 0xe2, 0x48, 0x91, 0xc1,
	0xd2, 0x21, 0x20, 0x92, 0x6b, 0x81, 0x89, 0x7c, 0xdd, 0x0b, 0xc8, 0x7b, 0x4d, 0xa4, 0x42, 0x3d,
	0x78, 0x67, 0xd5, 0x20, 0xa4, 0xb1, 0x03, 0x9a, 0xa0, 0x5d, 0xef, 0xdf, 0xcd, 0xbf, 0x6e, 0xdb,
	0x2b, 0xd9, 0x68, 0x2f, 0xb0, 0x57, 0xa4, 0x51, 0x8c, 0x8e, 0xe0, 0xfa, 0x9c, 0xb2, 0x98, 0xcf,
	0xa5, 0x53, 0x6d, 0x82, 0xb6, 0xdd, 0xdb, 0xf5, 0x6e, 0x0c, 0xe9, 0xbd, 0x29, 0x15, 0xbf, 0xcd,
	0xb2, 0xb4, 0x43, 0x73, 0x68, 0x47, 0x8c, 0x71, 0x15, 0x29, 0xca, 0x99, 0x74, 0xac, 0xa6, 0xd5,
	0xb6, 0x7b, 0x87, 0x7f, 0xe1, 0x7e, 0xe3, 0x43, 0xbd, 0xe7, 0x17, 0xbe, 0x43, 0xa6, 0xc4, 0x22,
	0xb8, 0xdc, 0xa9, 0xb1, 0x0b, 0x37, 0x7e, 0x25, 0xa0, 0x0d, 0x68, 0xbd, 0x23, 0x8b, 0x72, 0x22,
	0x41, 0x71, 0x44, 0x9b, 0x70, 0x6d, 0x16, 0x4d, 0x35, 0x31, 0xcf, 0xae, 0x07, 0x65, 0xf1, 0xb4,
	0xfa, 0x04, 0xb4, 0x1e, 0xc1, 0xd6, 0x75, 0x11, 0x64, 0xc6, 0x99, 0x24, 0xad, 0x1f, 0x00, 0x6e,
	0x5d, 0x33, 0x07, 0xf4, 0x10, 0x42, 0x9c, 0xe9, 0x50, 0x26, 0x91, 0x20, 0xd2, 0x34, 0xb6, 0x82,
	0x3a, 0xce, 0xf4, 0x81, 0xb9, 0x40, 0x5b, 0xb0, 0x28, 0x42, 0xcc, 0x35, 0x53, 0x26, 0x82, 0x15,
	0xfc, 0x8f, 0x33, 0x3d, 0x28, 0x6a, 0xb4, 0x0d, 0xed, 0x02, 0x4c, 0xa3, 0x13, 0x9a, 0xea, 0xd4,
	0xb1, 0x0c, 0x5c, 0xd8, 0xed, 0x97, 0x37, 0xa8, 0x0b, 0xef, 0xa7, 0x24, 0xe5, 0x62, 0x11, 0x4e,
	0x69, 0x4a, 0x55, 0x48, 0x59, 0x38, 0x5e, 0x28, 0x22, 0x9d, 0xff, 0x0c, 0x15, 0x95, 0xe0, 0x8b,
	0x02, 0x1b, 0xb1, 0x7e, 0x81, 0xa0, 0x0e, 0x44, 0x12, 0x27, 0x24, 0xd6, 0x53, 0x22, 0xc2, 0x4c,
	0x50, 0x2e, 0xa8, 0x5a, 0x38, 0x6b, 0x86, 0x7f, 0x6f, 0x85, 0xbc, 0x3c, 0x07, 0xd0, 0x03, 0xb8,
	0x6e, 0xf2, 0x45, 0x99, 0x53, 0x33, 0x9c, 0x5a, 0x91, 0x2e, 0xca, 0x7a, 0x9f, 0x00, 0x6c, 0x0c,
	0x82, 0xd1, 0x70, 0xb9, 0xb1, 0x40, 0x33, 0x45, 0x53, 0x72, 0x40, 0xc4, 0x8c, 0x62, 0x82, 0x3e,
	0x02, 0xd8, 0xf8, 0xf3, 0xf4, 0xd0, 0xde, 0x6d, 0xec, 0xbf, 0x31, 0xfc, 0x47, 0x97, 0xf3, 0x15,
	0x56, 0xfa, 0xec, 0xf4, 0xcc, 0x05, 0x5f, 0xce, 0xdc, 0xca, 0x87, 0xdc, 0x05, 0xa7, 0xb9, 0x0b,
	0x3e, 0xe7, 0x2e, 0xf8, 0x96, 0xbb, 0xe0, 0xf8, 0xd5, 0x2d, 0xfd, 0x06, 0x9e, 0x5d, 0x2e, 0x8e,
	0x2a, 0xe3, 0x9a, 0xf9, 0xa0, 0x1f, 0xff, 0x0c, 0x00, 0x00, 0xff, 0xff, 0xcf, 0xbc, 0x52, 0x3d,
	0x67, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CRIExtensionRuntimeServiceClient is the client API for CRIExtensionRuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CRIExtensionRuntimeServiceClient interface {
	UpdateContainerResourcesV2(ctx context.Context, in *UpdateContainerResourcesV2Request, opts ...grpc.CallOption) (*UpdateContainerResourcesV2Response, error)
}

type cRIExtensionRuntimeServiceClient struct {
	cc *grpc.ClientConn
}

func NewCRIExtensionRuntimeServiceClient(cc *grpc.ClientConn) CRIExtensionRuntimeServiceClient {
	return &cRIExtensionRuntimeServiceClient{cc}
}

func (c *cRIExtensionRuntimeServiceClient) UpdateContainerResourcesV2(ctx context.Context, in *UpdateContainerResourcesV2Request, opts ...grpc.CallOption) (*UpdateContainerResourcesV2Response, error) {
	out := new(UpdateContainerResourcesV2Response)
	err := c.cc.Invoke(ctx, "/containerd.runhcs.criextension.v1.CRIExtensionRuntimeService/UpdateContainerResourcesV2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CRIExtensionRuntimeServiceServer is the server API for CRIExtensionRuntimeService service.
type CRIExtensionRuntimeServiceServer interface {
	UpdateContainerResourcesV2(context.Context, *UpdateContainerResourcesV2Request) (*UpdateContainerResourcesV2Response, error)
}

func RegisterCRIExtensionRuntimeServiceServer(s *grpc.Server, srv CRIExtensionRuntimeServiceServer) {
	s.RegisterService(&_CRIExtensionRuntimeService_serviceDesc, srv)
}

func _CRIExtensionRuntimeService_UpdateContainerResourcesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContainerResourcesV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRIExtensionRuntimeServiceServer).UpdateContainerResourcesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/containerd.runhcs.criextension.v1.CRIExtensionRuntimeService/UpdateContainerResourcesV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRIExtensionRuntimeServiceServer).UpdateContainerResourcesV2(ctx, req.(*UpdateContainerResourcesV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _CRIExtensionRuntimeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "containerd.runhcs.criextension.v1.CRIExtensionRuntimeService",
	HandlerType: (*CRIExtensionRuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateContainerResourcesV2",
			Handler:    _CRIExtensionRuntimeService_UpdateContainerResourcesV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/Microsoft/hcsshim/cmd/containerd-shim-runhcs-v1/criextension/criextension.proto",
}

func (m *UpdateContainerResourcesV2Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateContainerResourcesV2Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContainerID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCriextension(dAtA, i, uint64(len(m.ContainerID)))
		i += copy(dAtA[i:], m.ContainerID)
	}
	if m.Windows != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCriextension(dAtA, i, uint64(m.Windows.Size()))
		n1, err := m.Windows.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Annotations) > 0 {
		for k, _ := range m.Annotations {
			dAtA[i] = 0x1a
			i++
			v := m.Annotations[k]
			mapSize := 1 + len(k) + sovCriextension(uint64(len(k))) + 1 + len(v) + sovCriextension(uint64(len(v)))
			i = encodeVarintCriextension(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintCriextension(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x12
			i++
			i = encodeVarintCriextension(dAtA, i, uint64(len(v)))
			i += copy(dAtA[i:], v)
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *UpdateContainerResourcesV2Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateContainerResourcesV2Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *WindowsContainerResourcesV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WindowsContainerResourcesV2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CpuShares != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintCriextension(dAtA, i, uint64(m.CpuShares))
	}
	if m.CpuCount != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintCriextension(dAtA, i, uint64(m.CpuCount))
	}
	if m.CpuMaximum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintCriextension(dAtA, i, uint64(m.CpuMaximum))
	}
	if m.MemoryLimitInBytes != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintCriextension(dAtA, i, uint64(m.MemoryLimitInBytes))
	}
	if m.SchedulerPriority != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintCriextension(dAtA, i, uint64(m.SchedulerPriority))
	}
	if m.CpuCap != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintCriextension(dAtA, i, uint64(m.CpuCap))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintCriextension(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UpdateContainerResourcesV2Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ContainerID)
	if l > 0 {
		n += 1 + l + sovCriextension(uint64(l))
	}
	if m.Windows != nil {
		l = m.Windows.Size()
		n += 1 + l + sovCriextension(uint64(l))
	}
	if len(m.Annotations) > 0 {
		for k, v := range m.Annotations {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCriextension(uint64(len(k))) + 1 + len(v) + sovCriextension(uint64(len(v)))
			n += mapEntrySize + 1 + sovCriextension(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpdateContainerResourcesV2Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *WindowsContainerResourcesV2) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CpuShares != 0 {
		n += 1 + sovCriextension(uint64(m.CpuShares))
	}
	if m.CpuCount != 0 {
		n += 1 + sovCriextension(uint64(m.CpuCount))
	}
	if m.CpuMaximum != 0 {
		n += 1 + sovCriextension(uint64(m.CpuMaximum))
	}
	if m.MemoryLimitInBytes != 0 {
		n += 1 + sovCriextension(uint64(m.MemoryLimitInBytes))
	}
	if m.SchedulerPriority != 0 {
		n += 1 + sovCriextension(uint64(m.SchedulerPriority))
	}
	if m.CpuCap != 0 {
		n += 1 + sovCriextension(uint64(m.CpuCap))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCriextension(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCriextension(x uint64) (n int) {
	return sovCriextension(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UpdateContainerResourcesV2Request) String() string {
	if this == nil {
		return "nil"
	}
	keysForAnnotations := make([]string, 0, len(this.Annotations))
	for k, _ := range this.Annotations {
		keysForAnnotations = append(keysForAnnotations, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForAnnotations)
	mapStringForAnnotations := "map[string]string{"
	for _, k := range keysForAnnotations {
		mapStringForAnnotations += fmt.Sprintf("%v: %v,", k, this.Annotations[k])
	}
	mapStringForAnnotations += "}"
	s := strings.Join([]string{`&UpdateContainerResourcesV2Request{`,
		`ContainerID:` + fmt.Sprintf("%v", this.ContainerID) + `,`,
		`Windows:` + strings.Replace(fmt.Sprintf("%v", this.Windows), "WindowsContainerResourcesV2", "WindowsContainerResourcesV2", 1) + `,`,
		`Annotations:` + mapStringForAnnotations + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateContainerResourcesV2Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateContainerResourcesV2Response{`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func (this *WindowsContainerResourcesV2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&WindowsContainerResourcesV2{`,
		`CpuShares:` + fmt.Sprintf("%v", this.CpuShares) + `,`,
		`CpuCount:` + fmt.Sprintf("%v", this.CpuCount) + `,`,
		`CpuMaximum:` + fmt.Sprintf("%v", this.CpuMaximum) + `,`,
		`MemoryLimitInBytes:` + fmt.Sprintf("%v", this.MemoryLimitInBytes) + `,`,
		`SchedulerPriority:` + fmt.Sprintf("%v", this.SchedulerPriority) + `,`,
		`CpuCap:` + fmt.Sprintf("%v", this.CpuCap) + `,`,
		`XXX_unrecognized:` + fmt.Sprintf("%v", this.XXX_unrecognized) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCriextension(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UpdateContainerResourcesV2Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCriextension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContainerResourcesV2Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContainerResourcesV2Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCriextension
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCriextension
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Windows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCriextension
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCriextension
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Windows == nil {
				m.Windows = &WindowsContainerResourcesV2{}
			}
			if err := m.Windows.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Annotations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCriextension
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCriextension
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Annotations == nil {
				m.Annotations = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCriextension
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCriextension
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCriextension
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCriextension
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCriextension
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCriextension
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCriextension
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCriextension(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthCriextension
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Annotations[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCriextension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCriextension
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCriextension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateContainerResourcesV2Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCriextension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContainerResourcesV2Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContainerResourcesV2Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCriextension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCriextension
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCriextension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WindowsContainerResourcesV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCriextension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WindowsContainerResourcesV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WindowsContainerResourcesV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuShares", wireType)
			}
			m.CpuShares = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuShares |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuCount", wireType)
			}
			m.CpuCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuMaximum", wireType)
			}
			m.CpuMaximum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuMaximum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryLimitInBytes", wireType)
			}
			m.MemoryLimitInBytes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryLimitInBytes |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchedulerPriority", wireType)
			}
			m.SchedulerPriority = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SchedulerPriority |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuCap", wireType)
			}
			m.CpuCap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CpuCap |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCriextension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCriextension
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthCriextension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCriextension(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCriextension
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCriextension
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthCriextension
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCriextension
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCriextension(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthCriextension
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCriextension = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCriextension   = fmt.Errorf("proto: integer overflow")
)
