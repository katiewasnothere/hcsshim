// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: criextension.proto

/*
	Package criextension is a generated protocol buffer package.

	It is generated from these files:
		criextension.proto

	It has these top-level messages:
		UpdateContainerResourcesV2Request
		UpdateContainerResourcesV2Response
		COWContainerResourcesV2
*/
package api

import (
	fmt "fmt"

	proto "github.com/gogo/protobuf/proto"

	math "math"

	_ "github.com/gogo/protobuf/gogoproto"

	runtime_v1alpha2 "k8s.io/cri-api/pkg/apis/runtime/v1alpha2"

	context "golang.org/x/net/context"

	grpc "google.golang.org/grpc"

	strings "strings"

	reflect "reflect"

	io "io"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type UpdateContainerResourcesV2Request struct {
	ContainerId string                   `protobuf:"bytes,1,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	Resources   *COWContainerResourcesV2 `protobuf:"bytes,2,opt,name=resources" json:"resources,omitempty"`
}

func (m *UpdateContainerResourcesV2Request) Reset()      { *m = UpdateContainerResourcesV2Request{} }
func (*UpdateContainerResourcesV2Request) ProtoMessage() {}
func (*UpdateContainerResourcesV2Request) Descriptor() ([]byte, []int) {
	return fileDescriptorCriextension, []int{0}
}

func (m *UpdateContainerResourcesV2Request) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

func (m *UpdateContainerResourcesV2Request) GetResources() *COWContainerResourcesV2 {
	if m != nil {
		return m.Resources
	}
	return nil
}

type UpdateContainerResourcesV2Response struct {
}

func (m *UpdateContainerResourcesV2Response) Reset()      { *m = UpdateContainerResourcesV2Response{} }
func (*UpdateContainerResourcesV2Response) ProtoMessage() {}
func (*UpdateContainerResourcesV2Response) Descriptor() ([]byte, []int) {
	return fileDescriptorCriextension, []int{1}
}

type COWContainerResourcesV2 struct {
	StdWindowsResources *runtime_v1alpha2.WindowsContainerResources `protobuf:"bytes,1,opt,name=std_windows_resources,json=stdWindowsResources" json:"std_windows_resources,omitempty"`
	StdLinuxResources   *runtime_v1alpha2.LinuxContainerResources   `protobuf:"bytes,2,opt,name=std_linux_resources,json=stdLinuxResources" json:"std_linux_resources,omitempty"`
}

func (m *COWContainerResourcesV2) Reset()      { *m = COWContainerResourcesV2{} }
func (*COWContainerResourcesV2) ProtoMessage() {}
func (*COWContainerResourcesV2) Descriptor() ([]byte, []int) {
	return fileDescriptorCriextension, []int{2}
}

func (m *COWContainerResourcesV2) GetStdWindowsResources() *runtime_v1alpha2.WindowsContainerResources {
	if m != nil {
		return m.StdWindowsResources
	}
	return nil
}

func (m *COWContainerResourcesV2) GetStdLinuxResources() *runtime_v1alpha2.LinuxContainerResources {
	if m != nil {
		return m.StdLinuxResources
	}
	return nil
}

func init() {
	proto.RegisterType((*UpdateContainerResourcesV2Request)(nil), "criextension.api.UpdateContainerResourcesV2Request")
	proto.RegisterType((*UpdateContainerResourcesV2Response)(nil), "criextension.api.UpdateContainerResourcesV2Response")
	proto.RegisterType((*COWContainerResourcesV2)(nil), "criextension.api.COWContainerResourcesV2")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CRIExtensionRuntimeService service

type CRIExtensionRuntimeServiceClient interface {
	UpdateContainerResourcesV2(ctx context.Context, in *UpdateContainerResourcesV2Request, opts ...grpc.CallOption) (*UpdateContainerResourcesV2Response, error)
}

type cRIExtensionRuntimeServiceClient struct {
	cc *grpc.ClientConn
}

func NewCRIExtensionRuntimeServiceClient(cc *grpc.ClientConn) CRIExtensionRuntimeServiceClient {
	return &cRIExtensionRuntimeServiceClient{cc}
}

func (c *cRIExtensionRuntimeServiceClient) UpdateContainerResourcesV2(ctx context.Context, in *UpdateContainerResourcesV2Request, opts ...grpc.CallOption) (*UpdateContainerResourcesV2Response, error) {
	out := new(UpdateContainerResourcesV2Response)
	err := grpc.Invoke(ctx, "/criextension.api.CRIExtensionRuntimeService/UpdateContainerResourcesV2", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CRIExtensionRuntimeService service

type CRIExtensionRuntimeServiceServer interface {
	UpdateContainerResourcesV2(context.Context, *UpdateContainerResourcesV2Request) (*UpdateContainerResourcesV2Response, error)
}

func RegisterCRIExtensionRuntimeServiceServer(s *grpc.Server, srv CRIExtensionRuntimeServiceServer) {
	s.RegisterService(&_CRIExtensionRuntimeService_serviceDesc, srv)
}

func _CRIExtensionRuntimeService_UpdateContainerResourcesV2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateContainerResourcesV2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CRIExtensionRuntimeServiceServer).UpdateContainerResourcesV2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/criextension.api.CRIExtensionRuntimeService/UpdateContainerResourcesV2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CRIExtensionRuntimeServiceServer).UpdateContainerResourcesV2(ctx, req.(*UpdateContainerResourcesV2Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _CRIExtensionRuntimeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "criextension.api.CRIExtensionRuntimeService",
	HandlerType: (*CRIExtensionRuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateContainerResourcesV2",
			Handler:    _CRIExtensionRuntimeService_UpdateContainerResourcesV2_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "criextension.proto",
}

func (m *UpdateContainerResourcesV2Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateContainerResourcesV2Request) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ContainerId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCriextension(dAtA, i, uint64(len(m.ContainerId)))
		i += copy(dAtA[i:], m.ContainerId)
	}
	if m.Resources != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCriextension(dAtA, i, uint64(m.Resources.Size()))
		n1, err := m.Resources.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *UpdateContainerResourcesV2Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateContainerResourcesV2Response) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *COWContainerResourcesV2) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *COWContainerResourcesV2) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.StdWindowsResources != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintCriextension(dAtA, i, uint64(m.StdWindowsResources.Size()))
		n2, err := m.StdWindowsResources.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.StdLinuxResources != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintCriextension(dAtA, i, uint64(m.StdLinuxResources.Size()))
		n3, err := m.StdLinuxResources.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintCriextension(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *UpdateContainerResourcesV2Request) Size() (n int) {
	var l int
	_ = l
	l = len(m.ContainerId)
	if l > 0 {
		n += 1 + l + sovCriextension(uint64(l))
	}
	if m.Resources != nil {
		l = m.Resources.Size()
		n += 1 + l + sovCriextension(uint64(l))
	}
	return n
}

func (m *UpdateContainerResourcesV2Response) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *COWContainerResourcesV2) Size() (n int) {
	var l int
	_ = l
	if m.StdWindowsResources != nil {
		l = m.StdWindowsResources.Size()
		n += 1 + l + sovCriextension(uint64(l))
	}
	if m.StdLinuxResources != nil {
		l = m.StdLinuxResources.Size()
		n += 1 + l + sovCriextension(uint64(l))
	}
	return n
}

func sovCriextension(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozCriextension(x uint64) (n int) {
	return sovCriextension(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *UpdateContainerResourcesV2Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateContainerResourcesV2Request{`,
		`ContainerId:` + fmt.Sprintf("%v", this.ContainerId) + `,`,
		`Resources:` + strings.Replace(fmt.Sprintf("%v", this.Resources), "COWContainerResourcesV2", "COWContainerResourcesV2", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *UpdateContainerResourcesV2Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&UpdateContainerResourcesV2Response{`,
		`}`,
	}, "")
	return s
}
func (this *COWContainerResourcesV2) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&COWContainerResourcesV2{`,
		`StdWindowsResources:` + strings.Replace(fmt.Sprintf("%v", this.StdWindowsResources), "WindowsContainerResources", "runtime_v1alpha2.WindowsContainerResources", 1) + `,`,
		`StdLinuxResources:` + strings.Replace(fmt.Sprintf("%v", this.StdLinuxResources), "LinuxContainerResources", "runtime_v1alpha2.LinuxContainerResources", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringCriextension(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *UpdateContainerResourcesV2Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCriextension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContainerResourcesV2Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContainerResourcesV2Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCriextension
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ContainerId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Resources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCriextension
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Resources == nil {
				m.Resources = &COWContainerResourcesV2{}
			}
			if err := m.Resources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCriextension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCriextension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateContainerResourcesV2Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCriextension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateContainerResourcesV2Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateContainerResourcesV2Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipCriextension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCriextension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *COWContainerResourcesV2) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCriextension
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: COWContainerResourcesV2: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: COWContainerResourcesV2: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdWindowsResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCriextension
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StdWindowsResources == nil {
				m.StdWindowsResources = &runtime_v1alpha2.WindowsContainerResources{}
			}
			if err := m.StdWindowsResources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StdLinuxResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCriextension
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StdLinuxResources == nil {
				m.StdLinuxResources = &runtime_v1alpha2.LinuxContainerResources{}
			}
			if err := m.StdLinuxResources.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCriextension(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthCriextension
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCriextension(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCriextension
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCriextension
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthCriextension
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowCriextension
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipCriextension(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthCriextension = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCriextension   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("criextension.proto", fileDescriptorCriextension) }

var fileDescriptorCriextension = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x6f, 0xda, 0x30,
	0x14, 0xc7, 0xf1, 0x0e, 0x93, 0x30, 0x1c, 0x36, 0x4f, 0xd3, 0x50, 0x0e, 0x11, 0x44, 0x3b, 0xb0,
	0x4d, 0x38, 0x5a, 0xd8, 0x61, 0xe7, 0xa1, 0x69, 0x42, 0x9a, 0x54, 0x29, 0x55, 0x8b, 0xda, 0x4b,
	0x14, 0x12, 0x37, 0x58, 0x80, 0xed, 0xda, 0x0e, 0x70, 0xec, 0xb5, 0xa7, 0xf6, 0x63, 0xf4, 0xa3,
	0x70, 0xec, 0xa5, 0x52, 0x8f, 0x25, 0xfd, 0x22, 0x15, 0x09, 0x81, 0xb6, 0x81, 0x56, 0xbd, 0xc5,
	0xff, 0xf7, 0xfe, 0xbf, 0x3c, 0xff, 0x9f, 0x21, 0x0a, 0x24, 0x25, 0x33, 0x4d, 0x98, 0xa2, 0x9c,
	0x61, 0x21, 0xb9, 0xe6, 0xe8, 0xc3, 0x13, 0xcd, 0x17, 0xd4, 0x68, 0x45, 0x54, 0x0f, 0xe2, 0x3e,
	0x0e, 0xf8, 0xd8, 0x8e, 0x78, 0xc4, 0xed, 0xb4, 0xb1, 0x1f, 0x9f, 0xa4, 0xa7, 0xf4, 0x90, 0x7e,
	0x65, 0x00, 0xc3, 0x19, 0xfe, 0x56, 0x98, 0x72, 0x3b, 0x90, 0xb4, 0xe5, 0x0b, 0x6a, 0x8b, 0x61,
	0x64, 0xfb, 0x82, 0x2a, 0x5b, 0xc6, 0x4c, 0xd3, 0x31, 0xb1, 0x27, 0x3f, 0xfd, 0x91, 0x18, 0xf8,
	0xce, 0x52, 0xcd, 0x3c, 0xd6, 0x05, 0x80, 0x8d, 0x03, 0x11, 0xfa, 0x9a, 0x74, 0x38, 0xd3, 0x3e,
	0x65, 0x44, 0xba, 0x44, 0xf1, 0x58, 0x06, 0x44, 0x1d, 0x3a, 0x2e, 0x39, 0x8d, 0x89, 0xd2, 0xa8,
	0x01, 0xab, 0x41, 0x5e, 0xf6, 0x68, 0x58, 0x03, 0x75, 0xd0, 0x2c, 0xbb, 0x95, 0xb5, 0xd6, 0x0d,
	0xd1, 0x3f, 0x58, 0x96, 0xb9, 0xb1, 0xf6, 0xae, 0x0e, 0x9a, 0x15, 0xe7, 0x1b, 0x7e, 0x7e, 0x23,
	0xdc, 0xd9, 0xeb, 0x6d, 0xfd, 0xcf, 0xc6, 0x6b, 0x7d, 0x85, 0xd6, 0x4b, 0x03, 0x29, 0xc1, 0x99,
	0x22, 0xd6, 0x0d, 0x80, 0x5f, 0x76, 0xc0, 0x90, 0x07, 0x3f, 0x2b, 0x1d, 0x7a, 0x53, 0xca, 0x42,
	0x3e, 0x55, 0xde, 0x66, 0x2c, 0x90, 0x8e, 0xf5, 0x03, 0xaf, 0xf2, 0xc0, 0x79, 0x1e, 0xb8, 0x97,
	0xb5, 0x16, 0x69, 0xee, 0x27, 0xa5, 0xc3, 0x55, 0x75, 0x2d, 0xa2, 0x23, 0xb8, 0x94, 0xbd, 0x11,
	0x65, 0xf1, 0xcc, 0x2b, 0xde, 0xba, 0x80, 0xff, 0xbf, 0x6c, 0xdc, 0x02, 0xff, 0xa8, 0x74, 0x98,
	0xd6, 0xd6, 0x92, 0x73, 0x05, 0xa0, 0xd1, 0x71, 0xbb, 0x7f, 0xf3, 0xd4, 0xdc, 0x8c, 0xb5, 0x4f,
	0xe4, 0x84, 0x06, 0x04, 0x9d, 0x03, 0x68, 0xec, 0x4e, 0x07, 0xb5, 0x8b, 0x89, 0xbf, 0xba, 0x5c,
	0xe3, 0xd7, 0xdb, 0x4c, 0xab, 0x05, 0x94, 0xfe, 0x7c, 0x9f, 0x2f, 0x4c, 0x70, 0xbb, 0x30, 0x4b,
	0x67, 0x89, 0x09, 0xe6, 0x89, 0x09, 0xae, 0x13, 0x13, 0xdc, 0x25, 0x26, 0xb8, 0xbc, 0x37, 0x4b,
	0xc7, 0xd5, 0xc7, 0xd0, 0xfe, 0xfb, 0xf4, 0xb5, 0xb5, 0x1f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3d,
	0xe0, 0x0d, 0x37, 0xf8, 0x02, 0x00, 0x00,
}
